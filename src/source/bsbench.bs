namespace bsbench
    const allSuites = [] as BenchmarkSuite[]

    function runSync(options as RunOptions)
        suites = allSuites
        for each suite in suites
            runSuite(suite, options)
        end for
    end function

    function runAsync()
    end function

    function runSuite(suite as BenchmarkSuite, options as RunOptions)
        'print a ascii table style fenced header for the suite
        print `********************************************************************`
        print `           ${suite.name} `
        print `********************************************************************`

        suiteResults = [] as BenchmarkResult[]
        for each test in suite.tests
            print `‌‌ `
            testFunction = test.func
            'if we've specified some warmup iterations, run them
            if options.warmupIterations <> invalid then
                print `${test.name} (Warming up)`
                testFunction(options.warmupIterations)
            end if

            print `${test.name} (Running)`
            result = testFunction(options.iterations)
            print `${test.name} (Done)`
            result.operationsPerSecond = bsbench.getOperationsPerSecond(result.startTime, result.endTime, result.iterations)
            suiteResults.push(result)
        end for

        printSuiteResults(suiteResults)
    end function

    function printSuiteResults(suiteResults as BenchmarkResult[])
        'print a few blank-ish lines to separate the results
        print `‌‌ \n‌‌ `
        print `${suiteResults[0].suiteName} -- RESULTS:`
        print padRight("", 50, "_")
        highestOpsPerSec = suiteResults[0].operationsPerSecond
        lowestOpsPerSec = suiteResults[0].operationsPerSecond
        opsPerSecMaxLen = 0
        nameLengthMaxLen = 0
        for each suiteResult in suiteResults
            'calculate slowest
            if suiteResult.operationsPerSecond < lowestOpsPerSec
                lowestOpsPerSec = suiteResult.operationsPerSecond
            end if

            'calculate highest ops/sec
            if suiteResult.operationsPerSecond > highestOpsPerSec
                highestOpsPerSec = suiteResult.operationsPerSecond
            end if

            'calculate logest ops/sec string
            opsPerSecTextLength = numberToString(suiteResult.operationsPerSecond).Len()
            if opsPerSecTextLength > opsPerSecMaxLen
                opsPerSecMaxLen = opsPerSecTextLength
            end if

            'calculate longest name
            if suiteResult.name.Len() > nameLengthMaxLen
                nameLengthMaxLen = suiteResult.name.Len()
            end if
        end for

        for each suiteResult in suiteResults
            postfix = ""
            if suiteResult.operationsPerSecond = highestOpsPerSec then
                postfix = " (fastest)"
            end if
            if suiteResult.operationsPerSecond = lowestOpsPerSec then
                postfix = " (slowest)"
            end if
            print padRight(suiteResult.name + ": ", nameLengthMaxLen + 5, "-"); " "; padLeft(numberToString(suiteResult.operationsPerSecond), opsPerSecMaxLen, " "); " ops/sec"; postfix
        end for
        'print a few blank-ish lines to separate the results
        print `‌‌ \n‌‌ `
    end function

    function padRight(value as string, padLength = 2 as integer, paddingCharacter = "0" as dynamic) as string
        while value.len() < padLength
            value += paddingCharacter
        end while
        return value
    end function

    function padLeft(value as string, padLength = 2 as integer, paddingCharacter = "0" as dynamic) as string
        while value.len() < padLength
            value = paddingCharacter + value
        end while
        return value
    end function

    function numberToString(num)
        result = ""
        i = 0
        while num > 1
            loopNum = (num mod 10).ToStr().Trim()
            result = loopNum + result
            num = num / 10
            i++
            if i mod 3 = 0 and num > 1 then
                result = "," + result
            end if
        end while
        result = result + "." + ((num * 10) mod 1).ToStr().Trim() + ((num * 100) mod 1).ToStr().Trim()
        return result
    end function

    function getOperationsPerSecond(startDate, endDate, ops)
        startMs = getMilliseconds(startDate)
        endMs = getMilliseconds(endDate)
        seconds = (endMs - startMs) / 1000
        if seconds = 0 then
            seconds = 0.0000001
        end if
        opsPerSec = ops / seconds
        return opsPerSec
    end function

    function getMilliseconds(date)
        result = 0
        result += date.GetMinutes() * 60 * 1000
        result += date.GetSeconds() * 1000
        result += date.GetMilliseconds()
        return result
    end function

end namespace

interface BenchmarkSuite
    name as string
    tests as BenchmarkTest[]
end interface
interface BenchmarkTest
    name as string
    func as function
end interface

interface RunOptions
    iterations as integer
    optional warmupIterations as integer
end interface

interface BenchmarkResult
    startTime as roDateTime
    endTime as roDateTime
    iterations as integer
    operationsPerSecond as double
    name as string
    suiteName as string
end interface
